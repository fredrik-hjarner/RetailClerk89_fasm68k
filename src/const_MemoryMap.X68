MEM_DEBUG_1=$00FF00000	; general debug register
MEM_DEBUG_2=$00FF00002	; general debug register
MEM_VBLANKFLAG=$00FF00004	; indicates whether vblank in-progess
MEM_VBLANK_COUNTER=$00FF00006	; incremented at vblank, used for debug & RNG
MEM_MAINLOOP_COUNTER=$00FF00008	; used for debug & RNG
MEM_FRAME_COUNTER=$00FF0000A	; current frame, cycles from 0-59
MEM_CONTROL_HELD=$00FF0000C	; store value of a held button
MEM_CONTROL_PRESSED=$00FF0000E	; store value of a pressed button
MEM_GAME_STATE=$00FF00010	; used to control the main loop flow
MEM_PLAYER_SPRITE_ID=$00FF00014	; sprite table id of player sprite
MEM_PLAYER_SPRITE_X=$00FF00016	; virtual x position of the player
MEM_PLAYER_SPRITE_Y=$00FF00018	; virtual y position of the player
MEM_PLAYER_SPRITE_PATTERN_INDEX=$00FF0001A	; index of pattern in VDP
MEM_PLAYER_SPRITE_DIRECTION=$00FF0001C	; which direction the player faces
MEM_PLAYER_SPRITE_FRAME=$00FF0001E	; animation frame of player sprite
MEM_PLAYER_SPRITE_STEP_COUNTER=$00FF00020	; used to determine when to move
MEM_NPC1_SPRITE_ID=$00FF00022	; sprite table id of NPC1 sprite
MEM_NPC1_SPRITE_X=$00FF00024	; virtual x position of NPC1 sprite
MEM_NPC1_SPRITE_Y=$00FF00026	; virtual y position of NPC1 sprite
MEM_NPC1_SPRITE_PATTERN_INDEX=$00FF00028	; index of pattern in VDP
MEM_NPC1_SPRITE_DIRECTION=$00FF0002A	; which direction NPC1 faces
MEM_NPC1_SPRITE_FRAME=$00FF0002C	; animation frame of NPC1 sprite
MEM_NPC1_SPRITE_STEP_COUNTER=$00FF0002E	; used to determine when to move
MEM_NPC1_MOVEMENT_COUNTER=$00FF00030	; used to determine how far to move
MEM_NPC1_MOVEMENT_INDEX=$00FF00032	; used to determine which direction to move
MEM_ACTIVE_SPRITE_LEFT_COLUMN=$00FF00034	; left column of active sprite
MEM_ACTIVE_SPRITE_HIGH_LEFT=$00FF00036	; high left row of active sprite
MEM_ACTIVE_SPRITE_LOW_LEFT=$00FF00038	; low left row of active sprite
MEM_ACTIVE_SPRITE_RIGHT_COLUMN=$00FF0003A	; right column of active sprite
MEM_ACTIVE_SPRITE_HIGH_RIGHT=$00FF0003C	; high right row of active sprite
MEM_ACTIVE_SPRITE_LOW_RIGHT=$00FF0003E	; low right row of active sprite
MEM_COLLISION_MAP_ROW=$00FF00040	; row of map data
MEM_COLLISION_RESULT=$00FF00044	; result of collision test
MEM_MAP_POSITION_X=$00FF00046	; x position of the map
MEM_MAP_POSITION_Y=$00FF00048	; y position of the map
MEM_FLAG_MAP_POSITION_CHANGED=$00FF0004A	; >0 if map position changed
MEM_COLLISION_DATA=$00FF0004C	; collision data for the current map
